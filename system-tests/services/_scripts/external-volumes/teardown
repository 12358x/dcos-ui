#!/bin/bash

# These are dependencies for the
# AWS Volume Cleaner script
pip install boto3
pip install retrying

# The command to run the AWS Volume Cleaner script
cmd="./services/_scripts/external-volumes/volclean.py \
-y -r $REGION -k $ACCESS_KEY_ID -s \"$SECRET_ACCESS_KEY\" \
--ignore-metrics --tags 'Name:^integration-test-dcos-ui-$TEST_UUID'"

# Used to match against the output of the script
MATCH_STRING="*Removing*Volumes*"

TIMEOUT=30
counter=0

# This is the number of volumes we want to delete.
# Check test-external-volumes.js to see how many volumes are created.
# This in most cases corresponds to the number of test cases.
num_vols_delete=2

# Iteratively delete volumes
while [ "$num_vols_delete" -gt 0 ]
do
  echo "$num_vols_delete volume(s) left to delete"
  while
    # Run the python script to search for system
    # integration test external volumes
    result=$(eval "$cmd 2>&1")
    echo $result

    # Check to see if the script responded by saying it removed volume(s)
    remove_string=$(echo $result | sed -n 's/^.*\(\Removing.*[0-9].*\Volumes\).*/\1/p')

    # If the script says it removed volumes,
    # extract the amount of volumes it removed
    num_removed=$(echo $remove_string | sed 's/[^0-9]*//g')

    # Deduct that amount from the number of volumes to delete
    num_vols_delete=$(($num_vols_delete-${num_removed:-0}))

    # Wait one second; we're checking for volumes to delete every second
    sleep 1s

    # Increment the counter to use for the timeout
    counter=$(($counter+1))

    # When $TIMEOUT seconds has elapsed, exit
    if [[ "$counter" -ge $TIMEOUT ]]; then
      echo "Timeout exceeded: External volume deletion"
      exit 1
    fi

    # Continously run the script until it tells us that it removed volume(s).
    # Afterwards, we check to see how much volumes are left to delete
    # and start another iteration of the process.
    [[ $result != $MATCH_STRING ]]
  do
    :
  done
done
