#!/usr/bin/env groovy

// This Jenkinsfile is only temporary until we switch completley to the Jenkinsfile only setup

@Library('sec_ci_libs@v2-latest') _

def master_branches = ["master", "jgieseke/archive-buildinfo-file", "jgieseke/update-latest-pr"] as String[]

pipeline {
  agent {
    dockerfile {
      args  '--shm-size=2g'
    }
  }

  parameters {
    booleanParam(defaultValue: false, description: 'Should the build be uploaded to S3?', name: 'SHOULD_UPLOAD_BUILD')
  }

  environment {
    JENKINS_VERSION = 'yes'
    NODE_PATH = 'node_modules'
  }

  options {
    timeout(time: 1, unit: 'HOURS')
  }

  stages {
    stage('Authorization') {
      when {
        expression { params.SHOULD_UPLOAD_BUILD == true }
      }

      steps {
        user_is_authorized(master_branches, '8b793652-f26a-422f-a9ba-0d1e47eb9d89', '#frontend-dev')
      }
    }

    stage('Initialization') {
      when {
        expression { params.SHOULD_UPLOAD_BUILD == true }
      }
      steps {
        ansiColor('xterm') {
          retry(2) {
            sh '''npm --unsafe-perm install'''
          }

          sh '''npm run scaffold'''
        }
      }
    }

    stage('Build') {
      when {
        expression { params.SHOULD_UPLOAD_BUILD == true }
      }
      steps {
        ansiColor('xterm') {
          sh '''npm run build-assets'''
        }
      }

      post {
        always {
          stash includes: 'dist/*', name: 'dist'
        }
      }
    }

     stage('Upload Build') {
      when {
        expression { params.SHOULD_UPLOAD_BUILD == true }
      }

      steps {
        unstash 'dist'
        withCredentials([
            usernamePassword(credentialsId: 'a7ac7f84-64ea-4483-8e66-bb204484e58f', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USER'),
            string(credentialsId: '3f0dbb48-de33-431f-b91c-2366d2f0e1cf',variable: 'AWS_ACCESS_KEY_ID'),
            string(credentialsId: 'f585ec9a-3c38-4f67-8bdb-79e5d4761937',variable: 'AWS_SECRET_ACCESS_KEY')
        ]) {
          sh "BRANCH_NAME=${env.BRANCH_NAME} ./scripts/ci/upload-build"
          sh "BRANCH_NAME=${env.BRANCH_NAME} ./scripts/ci/update-latest"
        }
      }


      post {
        always {
          archiveArtifacts 'buildinfo.json'
        }
      }
    }
  }
}
