schema {
  query: Cluster
}

# An agent in the cluster
type Agent {
  # The ID of an object
  id: String!

  # Hostname for the Agent
  hostname: String

  # Tasks associated with an Agent
  tasks(after: String, first: Int, before: String, last: Int): TaskConnection
}

# A connection to a list of Agents.
type AgentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AgentEdge]
}

# An edge in a connection.
type AgentEdge {
  # The item at the end of the edge
  node: Agent

  # A cursor for use in pagination
  cursor: String!
}

type Cluster {
  agent(
    # The ID of the Agent
    id: String!
  ): Agent

  # Agents in the cluster
  agents(after: String, first: Int, before: String, last: Int): AgentConnection
  group(
    # The ID of the Group
    id: String
  ): Group

  # Flat list of nested groups
  groups(groupId: String, after: String, first: Int, before: String, last: Int): GroupConnection
}

# A Group
type Group {
  # The ID of an object
  id: String!

  # Nested Groups
  groups(after: String, first: Int, before: String, last: Int): GroupConnection
}

# A connection to a list of nested Groups.
type GroupConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [GroupEdge]
}

# An edge in a connection.
type GroupEdge {
  # The item at the end of the edge
  node: Group

  # A cursor for use in pagination
  cursor: String!
}

enum HEALTH {
  Healthy
  Unhealthy
  Created
  Staging
  Starting
  Started
  Running
  Killing
  Finished
  Killed
  Failed
  Lost
  Error
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# A Task
type Task {
  # The ID of an object
  id: String!

  # Task name
  name: String!

  # Status of Task
  health: HEALTH!

  # Agent task belongs to
  agent: Agent!
}

# A connection to a list of Tasks.
type TaskConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TaskEdge]
}

# An edge in a connection.
type TaskEdge {
  # The item at the end of the edge
  node: Task

  # A cursor for use in pagination
  cursor: String!
}
